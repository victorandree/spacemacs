#+TITLE: Java layer

[[file:img/java.png]]

* Table of Contents                                         :TOC_4_gh:noexport:
 - [[#description][Description]]
 - [[#layer-installation][Layer Installation]]
   - [[#layer][Layer]]
 - [[#backends][Backends]]
   - [[#eclim][Eclim]]
     - [[#installation][Installation]]
       - [[#eclipse][Eclipse]]
       - [[#eclim-1][Eclim]]
     - [[#configuration][Configuration]]
     - [[#usage][Usage]]
   - [[#ensime][ENSIME]]
     - [[#installation-1][Installation]]
     - [[#usage-1][Usage]]
     - [[#issues][Issues]]
   - [[#meghanada][Meghanada]]
   - [[#jdee][JDEE]]
 - [[#key-bindings][Key bindings]]
   - [[#java-mode][Java-mode]]
     - [[#project-management][Project management]]
     - [[#eclimd][Eclimd]]
     - [[#maven][Maven]]
     - [[#goto][Goto]]
     - [[#refactoring][Refactoring]]
     - [[#documentation-find][Documentation, Find]]
     - [[#problems][Problems]]
     - [[#tests][Tests]]
   - [[#problems-buffer][Problems buffer]]
   - [[#projects-buffer][Projects buffer]]

* Description
This layer adds support for the Java language, it supports multiple backends:
- the [[http://eclim.org][Eclim]] client/server (default),
- the [[https://ensime.github.io/][ENSIME]] client/server,
- the [[https://github.com/mopemope/meghanada-emacs][Meghanada]] client/server.
- the [[https://github.com/jdee-emacs/jdee][JDEE]] package (work in progress)

* Layer Installation
** Layer
To use this configuration layer, add it to your =~/.spacemacs=. You will need to
add =java= to the existing =dotspacemacs-configuration-layers= list in this
file.

* Backends
To choose a default backend set the layer variable =java-backend=:

#+BEGIN_SRC elisp
(java :variables java-backend 'eclim)
#+END_SRC

Backend can be chosen on a per project basis using directory local variables
(files named =.dir-locals.el= at the root of a project), an example to use the
=meghanada= backend:

#+BEGIN_SRC elisp
;;; Directory Local Variables
;;; For more information see (info "(emacs) Directory Variables")

((java-mode (java-backend . meghanada)))
#+END_SRC

*Note:* you can add a directory local variable with ~SPC f v d~.

** Eclim
Eclim provides the ability to access Eclipse features such as code completion,
searching, code validation, and many more.

*** Installation
**** Eclipse
First you need the last version of Eclispe from the [[https://www.eclipse.org/downloads/eclipse-packages/][official Eclipse site]].

*Note:* if you are on MacOS there some issues between the new native Eclipse
application installed by the =Eclispe-install.app= wizard and the Eclim
installer wizard. The recommended way to install Eclipse on MacOS is by using
=homebrew= or by get the =tar.gz= compressed file instead. With homebrew
the command line to install Eclipse is =brew cask install eclipse-jee=.

**** Eclim
For installation of Eclim check the [[http://eclim.org/install.html#download][official page]] to download the installer
then double click on it or launch it in the command line with the following
command (the example is for MacOS, replace the eclispe.home definition by
your correct location as well as the current version of eclim):

#+BEGIN_SRC shell
$ java -Dvim.skip=true -Declipse.home=/Applications/Eclipse.app/Contents/Eclipse -jar eclim_2.6.0.jar install
#+END_SRC

*** Configuration
You may need to set the Eclipse and Eclim paths in your dotfile as layer
variables or in the =dotspacemacs/user-config=, for instance on MacOS as layer
variables:

 #+BEGIN_SRC elisp
(java :variables java-backend 'eclim
                 eclim-eclipse-dirs '("/Applications/Eclipse.app/Contents/Eclipse/")
                 eclim-executable "/Applications/Eclipse.app/Contents/Eclipse/eclim")
 #+END_SRC

You can also configure useful other options like the default location for the
Eclim workspace (default value is =~/workspace=), as shown below:

 #+BEGIN_SRC elisp
   (setq
    ;; Specify the workspace to use by default
    eclimd-default-workspace "/path/to/default/eclipse/workspace"
    ;; wether autostarting eclimd or not (default nil)
    eclimd-autostart t
    ;; Whether or not to block emacs until eclimd is ready (default nil)
    eclimd-wait-for-process t)
 #+END_SRC

*** Usage
Start the eclim daemon with ~SPC m d s~ and stop it with ~SPC m d k~. (See
below.)

** ENSIME
Another backend option is the ENSIME server, which is a lot more responsive than
Eclim. ENSIME is originally made to work with Scala but it now works with plain
Java projects as well, some calls it ENJIME.

*** Installation
Find it with your favourite package manager, eg:
#+BEGIN_SRC shell
  nix-env --install sbt
#+END_SRC
or refer to [[http://www.scala-sbt.org/download.html][the sbt installation instructions]].

You also need to follow [[https://ensime.github.io/build_tools/sbt/][the ENSIME configuration instructions]] to run ENSIME.

To use the build functions under ~SPC m b~ you need to use version =0.13.5= or
newer of =sbt=, and specify that in your project's =project/build.properties=.
For example,
#+BEGIN_SRC scala
  sbt.version=0.13.11
#+END_SRC

*** Usage
Start the ensime server by running ~SPC SPC ensime~ or ~M-x ensime~.

*** Issues
ENSIME is originally built for Scala, so support for java is not complete, in
particular refactoring doesn't work.

** TODO Meghanada

** TODO JDEE

* Key bindings
** Java-mode
*** Project management

| Key Binding | Description                    |
|-------------+--------------------------------|
| ~SPC m p b~ | Build project                  |
| ~SPC m p c~ | Create project                 |
| ~SPC m p d~ | Delete project                 |
| ~SPC m p g~ | Open file in current project   |
| ~SPC m p i~ | Import project                 |
| ~SPC m p j~ | Information about project      |
| ~SPC m p k~ | Close project                  |
| ~SPC m p o~ | Open project                   |
| ~SPC m p p~ | Open project management buffer |
| ~SPC m p u~ | Update project                 |

*** Eclimd

| Key Binding | Description  |
|-------------+--------------|
| ~SPC m d s~ | Start daemon |
| ~SPC m d k~ | Stop daemon  |

*** Maven

| Key Binding | Description                    |
|-------------+--------------------------------|
| ~SPC m m i~ | Run maven clean install        |
| ~SPC m m I~ | Run maven install              |
| ~SPC m m p~ | Run one already goal from list |
| ~SPC m m r~ | Run maven goals                |
| ~SPC m m R~ | Run one maven goal             |
| ~SPC m m t~ | Run maven test                 |

*** Goto

| Key Binding | Description                                 |
|-------------+---------------------------------------------|
| ~M-​,​~       | jump back from go to declaration/definition |
| ~SPC m g g~ | go to declaration                           |
| ~SPC m g t~ | go to type definition                       |

*** Refactoring

| Key Binding | Description      |
|-------------+------------------|
| ~SPC m r i~ | optimize imports |
| ~SPC m r f~ | Format file      |
| ~SPC m r r~ | Rename symbol    |

*** Documentation, Find

| Key Binding | Description                            |
|-------------+----------------------------------------|
| ~SPC m f f~ | general find in project                |
| ~SPC m h h~ | show documentation for symbol at point |
| ~SPC m h u~ | show usages for symbol at point        |

*** Problems

| Key Binding | Description                                |
|-------------+--------------------------------------------|
| ~SPC m e a~ | set all problems for next/prev action      |
| ~SPC m e b~ | open buffer with problems                  |
| ~SPC m e c~ | show options with problem corrections      |
| ~SPC m e e~ | set only errors for next/prev action       |
| ~SPC m e f~ | set only current file for next/prev action |
| ~SPC m e n~ | go to next problem                         |
| ~SPC m e o~ | open buffer with problems                  |
| ~SPC m e p~ | go to previous problem                     |
| ~SPC m e w~ | set warnings for next/prev action          |

*** Tests

| Key Binding | Description                                                   |
|-------------+---------------------------------------------------------------|
| ~SPC m t t~ | run JUnit tests for current method or current file or project |

** Problems buffer

| Key Binding | Description                         |
|-------------+-------------------------------------|
| ~RET~       | go to problem place                 |
| ~a~         | show all problems                   |
| ~e~         | show only errors                    |
| ~f~         | show problems only for current file |
| ~g~         | refresh problems                    |
| ~q~         | quit                                |
| ~w~         | show only warnings                  |

** Projects buffer

| Key Binding | Description                                |
|-------------+--------------------------------------------|
| ~RET~       | go to current project                      |
| ~c~         | go to problem place                        |
| ~D~         | delete project                             |
| ~g~         | refresh buffer                             |
| ~i~         | info about current project                 |
| ~I~         | import existing project into the workspace |
| ~m~         | mark current project                       |
| ~M~         | mark all projects                          |
| ~N~         | create new project                         |
| ~o~         | open project                               |
| ~p~         | update project                             |
| ~q~         | quit                                       |
| ~R~         | rename current project                     |
| ~u~         | unmark current project                     |
| ~U~         | unmark all projects                        |
